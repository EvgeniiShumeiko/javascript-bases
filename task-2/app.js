'use strict';

/**
* Задача 1
* Объясните почему код даёт именно такие результаты?
*/
let firstTaskHandler = () => {
  //пример 1
  let a = 1, b = 1, c, d;
  c = ++a;
  alert(c); // ответ: 2

  /*
  Ответ:
    В данном случае сначала оператор префиксного инкремента (собственно поэтому он и префиксный)
    и только потом сработает оператор присваивания.
    Сначала в переменная a увеличится на 1, а потом в c скопируется новое значение a.
  */


  //пример 2
  d = b++;
  alert(d); //ответ: 1

  /*
  Ответ:
    В данном случае сначала оператор присваивания и только потом сработает оператор постфиксного инкремента
    Сначала в переменную d скопируется значение переменной b (1), и только потом b увеличится на 1
  */


  //пример 3
  c = 2 + ++a;
  alert(c); //ответ: 5

  /*
  Ответ:
    В переменной a у нас уже 2 лежит (Пример 1)
    Еще раз префиксный инкремент, теперь в переменной a лежит 3
    Далее мы производим операцию сложения 2 + a = 2 + 3 = 5
    Присваеваем пременной c значение 5
  */


  //пример 4
  d = 2 + b++;
  alert(d); //ответ: 4
  alert(a); //3
  alert(b); //3

  /*
  Ответ:
    В переменной b у нас уже 2 лежит. (Пример 2)
    Еще раз постфиксный инкремент, в переменной b лежит 3, но это случиться уже после присваивания.
    d = 2 + b (на момент сложения и присваивания b = 2) = 4
    тут уже b = 3
    a = 3 - из (Пример 3)
  */
}


/**
* Задача 2
* Чему будут равны переменные x и a в примере ниже? Написать почему так произошло
* (описать последовательность действий).
*/
let secondTaskHandler = () => {
  let a = 2;
  let x = 1 + (a *= 2);
  /*
  Ответ:
    Для объяснения можно разложить на действия:
    1) Объявление переменной с последующим присвоением  - let a = 2
    2) Скобки - приоритетная операция, в скобках у нас Присвоение с умножением - a *= 2 (a = a * 2) !(переменная a = 4)!
    3) Сложение 1 + a = 1 + 4 = 5
    4) Объявление переменной с последующим присвоением let x = 5 !(переменная x = 5)!
  */
}

/**
 * Задача 3
 * Объявить две переменные a и b и задать им целочисленные произвольные начальные значения.
 * Затем написать скрипт, который работает по следующему принципу:
 * - если a и b положительные, вывести их разность (ноль можно считать положительным числом);
 * - если а и b отрицательные, вывести их произведение;
 * - * (этот пункт по сложнее, делайте по желанию) если а и b разных знаков, вывести их сумму;
 */
let thirdTaskHandler = () => {
  alert(task());

  function task() {
    // Валидация ввода упущенна осознано
    let a = Number(prompt("a = ")),
      b = Number(prompt("b = "))

    // если a и b положительные, вывести их разность (ноль можно считать положительным числом)
    if (a >= 0 && b >= 0) {
      return a - b
    }

    // если а и b отрицательные, вывести их произведение
    if (a < 0 && b < 0) {
      return  a * b
    }

    // если а и b разных знаков, вывести их сумму (такой вариант только и остался) ( можно еще проверять ((a*b) < 0) )
    return a + b
  }
}

/**
 * Задача 4
 * Реализовать основные 4 арифметические операции (+, -, /, *) в виде функций с двумя параметрами.
 * Т.е. например, функция для сложения должна принимать два числа, складывать их и возвращать результат.
 */

// Сложение
let add = (a, b) => a + b

// Вычитание
let sub = (a, b) => a - b

// деление
let div = (a, b) => a / b

// умножение
let multi = (a, b) => a * b

// Обязательно использовать оператор return. Я думаю тут понятно что условие соблюдено, пусть и не явно.

/*
  P.S Если бы я хотел использовать эти функции повсеместно я бы либо инициализировал переменные
  где-то в начале исполняемого кода, либо использовал Function declaration
 */


/**
 * Задача 5
 * Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
 * где arg1, arg2 – значения аргументов, operation – строка с названием операции.
 * В зависимости от переданного значения операции (использовать switch) выполнить одну из арифметических операций
 * (использовать функции из задания 4) и вернуть полученное значение.
 */

/**
 * Функция агрегатор простых математических оперций
 * @param {number} arg1  - первый операнд
 * @param {number} arg2 второй операнд
 * @param {number} operation - операция
 * @returns {number}
 */
function mathOperation(arg1, arg2, operation) {
  switch (operation) {
    case 'add':
      return add(arg1, arg2)
    case 'sub':
      return sub(arg2, arg2)
    case 'multi':
      return multi(arg1, arg2)
    case 'div':
      return div(arg1, arg2)
  }
  return NaN;
}

/**
 * Задание 6
 * Программа должна спросить у пользователя число, это будет количество денег, которое он хочет
 * положить на счет в банке. Затем программа должна выдать примерно такое сообщение:
 * "Ваша сумма в 101 рубль успешно зачислена." - в случае если пользователь ввел 101
 * "Ваша сумма в 10020 рублей успешно зачислена." - в случае если пользователь ввел 10020
 * "Ваша сумма в 120104 рубля успешно зачислена." - в случае если пользователь ввел 120104
 * То есть ваша задача выводить слово «рубль» в правильном падеже, в зависимости от введенного числа.
 */

let sixthTaskHandler = () => {

  /**
   * Функция склоенения слов в зависимости от числа
   * @param {number} num
   * @param {array} words - [если одно, если два, если пять]
   * @returns {string}
   */
  function num2word(num, words)
  {
    num %= 100;
    if (num > 19) {
      num = num % 10;
    }
    switch (num) {
      case 1:
        return(words[0]);
      case 2: case 3: case 4:
        return(words[1]);
    }
    return(words[2]);
  }

  let rubles = Number(prompt('Какую сумму хотите зачислить на ваш счет?'))
  if (isNaN(rubles) || rubles < 1) {
    alert('Сумма должна быть положительным числом')
  }

  let result = num2word(rubles, ['рубль', 'рубля', 'рублей'])

  alert(`Ваша сумма в ${rubles} ${result} успешно зачислена.`)
}


